/*
 *
 *     Copyright 2013-2015 Yohann Bianchi
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *     or see <http://www.gnu.org/licenses/>.
 *
 */

import groovy.swing.SwingBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

apply plugin: 'com.android.application'

repositories {
	mavenCentral()
	flatDir { dirs 'libs' }
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
    }

    signingConfigs{
        release {
            storeFile file(System.getenv("HOME") + "/.android/release.keystore")
            storePassword "dummy"
            keyAlias "sbooob"
            keyPassword "dummy"
        }
    }

	buildTypes {
		release {
            zipAlignEnabled true
            minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
			signingConfig signingConfigs.release
		}
	}

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'AndroidManifest.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.gms:play-services:6.5.87'
    compile 'com.android.support:support-v4:19.+'
    compile 'com.android.support:appcompat-v7:19.+'
    compile files('libs/PayPalAndroidSDK.jar')
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile 'com.mobsandgeeks.ui.library:TypefaceTextview:1.0.0@aar'
    compile 'se.emilsjolander:stickylistheaders:2.5.0'
    compile ('com.soundcloud:java-api-wrapper:1.3.1') {
        exclude group: 'org.apache.httpcomponents', module: 'httpmime'
        exclude group: 'org.json', module: 'json'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile 'net.simonvt:android-numberpicker:1.0.0'
}

gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':Application:assembleRelease')) {

        def storePass = ''
        def keyPass = ''
        if(System.console() == null) {
            new SwingBuilder().edt {
                dialog(
                        modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter passwords', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: "Please enter keystore password:")
                        storePassField = passwordField()
                        label(text: "Please enter key password:")
                        keyPassField = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            storePass = new String(storePassField.password); // Set storePass variable to value of input field
                            keyPass = new String(keyPassField.password); // Set keyPass variable to value of input field
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
        }
        else {
            storePass = new String(System.console().readPassword("\nPlease enter store password: "))
            keyPass = new String(System.console().readPassword("\nPlease enter key password: "))
        }

        if(storePass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }
        android.signingConfigs.release.storePassword = storePass
        android.signingConfigs.release.keyPassword = keyPass
    } // end if has task
} // end whenReady